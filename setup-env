#!/bin/sh
if [ -z "$ZSH_NAME"] && [ "x$0" = "x./setup-env" ]; then
    echo "Error: This script needs to be sourced."
    exit 1
fi

PROGNAME="setup-env"

if [ -n "$BASH_SOURCE" ]; then
    CWD="`dirname $BASH_SOURCE`"
elif [ -n "$ZSH_SOURCE"]; then
    CWD="`dirname $0`"
else
    CWD="`pwd`"
fi

if [ -n "$BBSERVER" ]; then
    unset BBSERVER
fi

usage()
{
    cat <<EOF
Usage: MACHINE=<machine> DISTRO=<distro> source $PROGNAME <build-dir>
Usage:                                   source $PROGNAME <build-dir>
    <machine>    machine name
    <distro>     distro name
    <build-dir>  build directory
The first usage is for creating a new build directory. In this case, the
script creates the build directory <build-dir>, configures it for the
specified <machine> and <distro>, and prepares the calling shell for running
bitbake on the build directory.
The second usage is for using an existing build directory. In this case,
the script prepares the calling shell for running bitbake on the build
directory <build-dir>. The build directory configuration is unchanged.

EOF
    ls layers/*/conf/machine/*.conf > /dev/null 2>&1
    ls layers/meta-testdistro/conf/distro/*.conf > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        cat <<EOF
Supported machines: `echo; ls layers/*/conf/machine/*.conf \
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`
Supported Tegra test distros: `echo; ls layers/meta-testdistro/conf/distro/*.conf \
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`
Examples:
- To create a new Yocto build directory:
  $ MACHINE=jetson-tx2 DISTRO=testdistro source $PROGNAME build
- To use an existing Yocto build directory:
  $ source $PROGNAME build

EOF
    fi
}

clean_up()
{
   unset LIST_MACHINES VALID_MACHINE
   unset CWD TEMPLATES SHORTOPTS LONGOPTS ARGS PROGNAME
   unset generated_config updated
   unset MACHINE SDKMACHINE DISTRO OEROOT TEMPLATECONF BBPATH
}

# get command line options
SHORTOPTS="h"
LONGOPTS="help"

ARGS=$(getopt --options $SHORTOPTS  \
  --longoptions $LONGOPTS --name $PROGNAME -- "$@" )
# Print the usage menu if invalid options are specified
if [ $? != 0 -o $# -lt 1 ]; then
   usage && clean_up
   return 1
fi

eval set -- "$ARGS"
while true;
do
    case $1 in
        -h|--help)
           usage
           clean_up
           return 0
           ;;
        --)
           shift
           break
           ;;
    esac
done

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..."
fi

if [ ! -e $1/conf/local.conf ]; then
    build_dir_setup_enabled="true"
else
    build_dir_setup_enabled="false"
fi

if [ "$build_dir_setup_enabled" = "true" ] && [ -z "$MACHINE" ]; then
    usage
    echo -e "ERROR: You must set MACHINE when creating a new build directory."
    clean_up
    return 1
fi

if [ -z "$SDKMACHINE" ]; then
    SDKMACHINE='x86_64'
fi

if [ "$build_dir_setup_enabled" = "true" ] && [ -z "$DISTRO" ]; then
    usage
    echo -e "ERROR: You must set DISTRO when creating a new build directory."
    clean_up
    return 1
fi

# Allow for multiple layer sets,
# default just "layers"
if [ "x$BMETA" = "x" ]; then
    BMETA="layers"
fi
OEROOT=`readlink -f "$CWD/$BMETA"`
export OEROOT

export TEMPLATECONF=${TEMPLATECONF:-$OEROOT/meta-testdistro/conf}

. $OEROOT/openembedded-core/oe-init-build-env $CWD/$1 > /dev/null

# if conf/local.conf not generated, no need to go further
if [ ! -e conf/local.conf ]; then
    clean_up && return 1
fi

generated_config=
if [ "$build_dir_setup_enabled" = "true" ]; then

    # Change settings according environment
    sed -e "s,MACHINE ??=.*,MACHINE ??= '$MACHINE',g" \
        -e "s,SDKMACHINE ?=.*,SDKMACHINE ?= '$SDKMACHINE',g" \
        -e "s,DISTRO ?=.*,DISTRO ?= '$DISTRO',g" \
        -e "s,PACKAGE_CLASSES ?=.*,PACKAGE_CLASSES ?= '$PACKAGE_CLASSES',g" \
        -i conf/local.conf

    for s in $HOME/.oe $HOME/.yocto; do
        if [ -e $s/site.conf ]; then
            echo "Linking $s/site.conf to conf/site.conf"
            ln -s $s/site.conf conf
        fi
    done

    generated_config=1
fi

cat <<EOF
Welcome to the meta-tegra test distribution.

The Yocto Project has extensive documentation about OE including a
reference manual which can be found at:
    http://yoctoproject.org/documentation
For more information about OpenEmbedded see their website:
    http://www.openembedded.org/

You can now run 'bitbake <target>'
Common targets are:
    core-image-minimal
    meta-toolchain
    meta-toolchain-sdk
    adt-installer
    meta-ide-support
EOF

if [ -n "$generated_config" ]; then
    cat <<EOF
Your build environment has been configured with:
    MACHINE=$MACHINE
    SDKMACHINE=$SDKMACHINE
    DISTRO=$DISTRO
EOF
else
    echo "Your configuration files at $1 have not been touched."
fi

TDROOT=`readlink -f "$CWD/$BMETA"`
export TDROOT

if [ ! -f "$BUILDDIR/conf/site.conf" -a \
       -f "$OEROOT/$TEMPLATECONF/site.conf.sample" ]; then
    cp $OEROOT/$TEMPLATECONF/site.conf.sample $BUILDDIR/conf/site.conf
fi

if [ -d "$OEROOT/meta-testdistro/scripts" ]; then
    PATH="$OEROOT/meta-testdistro/scripts:$PATH"
    [ ! -e "$OEROOT/meta-testdistro/scripts/buildenv-host-gcc-check" ] || . "$OEROOT/meta-testdistro/scripts/buildenv-host-gcc-check"
fi

BB_ENV_EXTRAWHITE="GNUPGHOME DBUS_SESSION_BUS_ADDRESS AWS_CONFIG_FILE AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SHARED_CREDENTIALS_FILE AWS_SESSION_TOKEN AWS_DEFAULT_REGION $BB_ENV_EXTRAWHITE"

if [ "`umask | tail -c 2`" = "7" ]; then
    umask 0022
fi

clean_up
